{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5z0guapFHZfO"
      },
      "source": [
        "<h2>Table of Contents</h2>\n",
        "\n",
        "<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n",
        "<ol>\n",
        "    <li><a href=\"#part1\">Frequency counts</a></li>\n",
        "    <li><a href=\"#part2\">Summary statistics</a></li>\n",
        "    <li><a href=\"#part3\">Slicing the dataset</a></li>\n",
        "    <li><a href=\"#part4\">Sorting the Data</a></li>\n",
        "    <li><a href=\"#part6\">Visual exploratory data analysis</a></li>\n",
        "</ol>\n",
        "\n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UCUYqpT3HZfP"
      },
      "source": [
        "\n",
        "<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n",
        "<h1 align=center>Part 1 : Frequency counts </h1>\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x36BCNjZHZfQ"
      },
      "source": [
        "Import all required Libraries "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "wKz14fYnHZfQ"
      },
      "outputs": [],
      "source": [
        "#Import Python Libraries\n",
        "import numpy as np\n",
        "import scipy as sp\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "Jqgixf0xHZfR"
      },
      "outputs": [],
      "source": [
        "#Read csv file\n",
        "df = pd.read_csv(\"Salaries.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 676
        },
        "id": "OPAZOKnKHZfR",
        "outputId": "a57655dc-2bd5-431e-fd6c-0b60ad056e57"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         rank discipline  phd  service   sex  salary\n",
              "0        Prof          B   56       49  Male  186960\n",
              "1        Prof          A   12        6  Male   93000\n",
              "2        Prof          A   23       20  Male  110515\n",
              "3        Prof          A   40       31  Male  131205\n",
              "4        Prof          B   20       18  Male  104800\n",
              "5        Prof          A   20       20  Male  122400\n",
              "6   AssocProf          A   20       17  Male   81285\n",
              "7        Prof          A   18       18  Male  126300\n",
              "8        Prof          A   29       19  Male   94350\n",
              "9        Prof          A   51       51  Male   57800\n",
              "10       Prof          B   39       33  Male  128250\n",
              "11       Prof          B   23       23  Male  134778\n",
              "12   AsstProf          B    1        0  Male   88000\n",
              "13       Prof          B   35       33  Male  162200\n",
              "14       Prof          B   25       19  Male  153750\n",
              "15       Prof          B   17        3  Male  150480\n",
              "16   AsstProf          B    8        3  Male   75044\n",
              "17   AsstProf          B    4        0  Male   92000\n",
              "18       Prof          A   19        7  Male  107300\n",
              "19       Prof          A   29       27  Male  150500"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-98fbe9d9-db83-44a8-8ffc-723fae2730d3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>discipline</th>\n",
              "      <th>phd</th>\n",
              "      <th>service</th>\n",
              "      <th>sex</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>56</td>\n",
              "      <td>49</td>\n",
              "      <td>Male</td>\n",
              "      <td>186960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>12</td>\n",
              "      <td>6</td>\n",
              "      <td>Male</td>\n",
              "      <td>93000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>23</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>110515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>40</td>\n",
              "      <td>31</td>\n",
              "      <td>Male</td>\n",
              "      <td>131205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>20</td>\n",
              "      <td>18</td>\n",
              "      <td>Male</td>\n",
              "      <td>104800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>122400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>AssocProf</td>\n",
              "      <td>A</td>\n",
              "      <td>20</td>\n",
              "      <td>17</td>\n",
              "      <td>Male</td>\n",
              "      <td>81285</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>18</td>\n",
              "      <td>18</td>\n",
              "      <td>Male</td>\n",
              "      <td>126300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>29</td>\n",
              "      <td>19</td>\n",
              "      <td>Male</td>\n",
              "      <td>94350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>51</td>\n",
              "      <td>51</td>\n",
              "      <td>Male</td>\n",
              "      <td>57800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>39</td>\n",
              "      <td>33</td>\n",
              "      <td>Male</td>\n",
              "      <td>128250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>23</td>\n",
              "      <td>23</td>\n",
              "      <td>Male</td>\n",
              "      <td>134778</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>AsstProf</td>\n",
              "      <td>B</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Male</td>\n",
              "      <td>88000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>35</td>\n",
              "      <td>33</td>\n",
              "      <td>Male</td>\n",
              "      <td>162200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>25</td>\n",
              "      <td>19</td>\n",
              "      <td>Male</td>\n",
              "      <td>153750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>17</td>\n",
              "      <td>3</td>\n",
              "      <td>Male</td>\n",
              "      <td>150480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>AsstProf</td>\n",
              "      <td>B</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>Male</td>\n",
              "      <td>75044</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>AsstProf</td>\n",
              "      <td>B</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>Male</td>\n",
              "      <td>92000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>19</td>\n",
              "      <td>7</td>\n",
              "      <td>Male</td>\n",
              "      <td>107300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>29</td>\n",
              "      <td>27</td>\n",
              "      <td>Male</td>\n",
              "      <td>150500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98fbe9d9-db83-44a8-8ffc-723fae2730d3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-98fbe9d9-db83-44a8-8ffc-723fae2730d3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-98fbe9d9-db83-44a8-8ffc-723fae2730d3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "df.head(20)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6MNr_VIoHZfS",
        "outputId": "5025869d-7178-45db-9e9c-ac1f3a15faa9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Male      39\n",
              "Female    39\n",
              "Name: sex, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "#Count the number of unique values in our data\n",
        "#df.sex.value_counts(dropna=False)\n",
        "#df.salary.value_counts(dropna=False)\n",
        "#df.discipline.value_counts(dropna=False)\n",
        "\n",
        "df.sex.value_counts(dropna=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "scrolled": false,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8uelMF3DHZfT",
        "outputId": "16505f17-eafe-427e-dded-bd75099b47a4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 78 entries, 0 to 77\n",
            "Data columns (total 6 columns):\n",
            " #   Column      Non-Null Count  Dtype \n",
            "---  ------      --------------  ----- \n",
            " 0   rank        78 non-null     object\n",
            " 1   discipline  78 non-null     object\n",
            " 2   phd         78 non-null     int64 \n",
            " 3   service     78 non-null     int64 \n",
            " 4   sex         78 non-null     object\n",
            " 5   salary      78 non-null     int64 \n",
            "dtypes: int64(3), object(3)\n",
            "memory usage: 3.8+ KB\n"
          ]
        }
      ],
      "source": [
        "#Data type of each column\n",
        "df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Us17t0LHHZfT"
      },
      "source": [
        "<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n",
        "<h1 align=center> Part 2: Summary statistics and filtering </h1>\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lFlMRnLWHZfU"
      },
      "source": [
        "### Summary statistics"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "zBJaM6O2HZfU",
        "outputId": "ede62cc4-91bf-4e9c-f4fd-f0c2deeb4898"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             phd    service         salary\n",
              "count  78.000000  78.000000      78.000000\n",
              "mean   19.705128  15.051282  108023.782051\n",
              "std    12.498425  12.139768   28293.661022\n",
              "min     1.000000   0.000000   57800.000000\n",
              "25%    10.250000   5.250000   88612.500000\n",
              "50%    18.500000  14.500000  104671.000000\n",
              "75%    27.750000  20.750000  126774.750000\n",
              "max    56.000000  51.000000  186960.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ebb21fd6-cadb-4f77-8eec-b9189129516d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>phd</th>\n",
              "      <th>service</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>78.000000</td>\n",
              "      <td>78.000000</td>\n",
              "      <td>78.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>19.705128</td>\n",
              "      <td>15.051282</td>\n",
              "      <td>108023.782051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>12.498425</td>\n",
              "      <td>12.139768</td>\n",
              "      <td>28293.661022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>57800.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>10.250000</td>\n",
              "      <td>5.250000</td>\n",
              "      <td>88612.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>18.500000</td>\n",
              "      <td>14.500000</td>\n",
              "      <td>104671.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>27.750000</td>\n",
              "      <td>20.750000</td>\n",
              "      <td>126774.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>56.000000</td>\n",
              "      <td>51.000000</td>\n",
              "      <td>186960.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ebb21fd6-cadb-4f77-8eec-b9189129516d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ebb21fd6-cadb-4f77-8eec-b9189129516d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ebb21fd6-cadb-4f77-8eec-b9189129516d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "\n",
        "df.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t2_vhyAoHZfU"
      },
      "source": [
        "---\n",
        "### Filtering"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "uF6SDTslHZfU",
        "outputId": "27010aae-6fbc-46eb-8408-cd4ee4905a0f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    rank discipline  phd  service   sex  salary\n",
              "0   Prof          B   56       49  Male  186960\n",
              "3   Prof          A   40       31  Male  131205\n",
              "5   Prof          A   20       20  Male  122400\n",
              "7   Prof          A   18       18  Male  126300\n",
              "10  Prof          B   39       33  Male  128250"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-64699a84-ce0a-43e3-b77f-84b983bcf5df\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>discipline</th>\n",
              "      <th>phd</th>\n",
              "      <th>service</th>\n",
              "      <th>sex</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>56</td>\n",
              "      <td>49</td>\n",
              "      <td>Male</td>\n",
              "      <td>186960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>40</td>\n",
              "      <td>31</td>\n",
              "      <td>Male</td>\n",
              "      <td>131205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>122400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>18</td>\n",
              "      <td>18</td>\n",
              "      <td>Male</td>\n",
              "      <td>126300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>39</td>\n",
              "      <td>33</td>\n",
              "      <td>Male</td>\n",
              "      <td>128250</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64699a84-ce0a-43e3-b77f-84b983bcf5df')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-64699a84-ce0a-43e3-b77f-84b983bcf5df button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-64699a84-ce0a-43e3-b77f-84b983bcf5df');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "#Select observation with the value in the salary column > 120K\n",
        "df_sub = df[ df['salary'] > 120000]\n",
        "df_sub.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gxY8LEnpHZfV",
        "outputId": "36c0e27c-b1f7-46a4-96f4-4058c64178d0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Int64Index([ 0,  3,  5,  7, 10, 11, 13, 14, 15, 19, 26, 27, 29, 31, 35, 36, 39,\n",
              "             40, 44, 45, 49, 51, 58, 72, 75],\n",
              "            dtype='int64'),\n",
              " Index(['rank', 'discipline', 'phd', 'service', 'sex', 'salary'], dtype='object')]"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "# It give indexes and columns names\n",
        "df_sub.axes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "omMtz9aQHZfV",
        "outputId": "55dfa208-da31-4134-b6d3-4398be01274e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         rank discipline  phd  service     sex  salary\n",
              "39       Prof          B   18       18  Female  129000\n",
              "40       Prof          A   39       36  Female  137000\n",
              "41  AssocProf          A   13        8  Female   74830\n",
              "42   AsstProf          B    4        2  Female   80225\n",
              "43   AsstProf          B    5        0  Female   77000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-99a90c2c-55e0-4d36-b669-958fb0f45595\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>discipline</th>\n",
              "      <th>phd</th>\n",
              "      <th>service</th>\n",
              "      <th>sex</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>18</td>\n",
              "      <td>18</td>\n",
              "      <td>Female</td>\n",
              "      <td>129000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>39</td>\n",
              "      <td>36</td>\n",
              "      <td>Female</td>\n",
              "      <td>137000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>AssocProf</td>\n",
              "      <td>A</td>\n",
              "      <td>13</td>\n",
              "      <td>8</td>\n",
              "      <td>Female</td>\n",
              "      <td>74830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>AsstProf</td>\n",
              "      <td>B</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>Female</td>\n",
              "      <td>80225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>AsstProf</td>\n",
              "      <td>B</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>Female</td>\n",
              "      <td>77000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99a90c2c-55e0-4d36-b669-958fb0f45595')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-99a90c2c-55e0-4d36-b669-958fb0f45595 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-99a90c2c-55e0-4d36-b669-958fb0f45595');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "#Select data for female professors\n",
        "df_female = df[ df['sex'] == 'Female']\n",
        "df_female.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jmRD6_J-HZfW",
        "outputId": "a77b811f-24dc-474b-b5f6-7dca92eda029"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "98331.11111111111"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "# Using filtering, find the mean value of the salary for the discipline A\n",
        "df[ df['discipline'] =='A'].salary.mean()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IM2Uhj6CHZfW"
      },
      "source": [
        "---\n",
        "<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n",
        "<h1 align=center> Part 3:  Slicing the dataset </h1>\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "k9QAGn2BHZfW"
      },
      "outputs": [],
      "source": [
        "#Select column salary\n",
        "df1 = df['salary']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "orGOXoNcHZfX",
        "outputId": "820befe6-d967-4916-c0c6-448d3917aed6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.series.Series"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "#Check data type of the result\n",
        "type(df1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4zwEPNCaHZfX",
        "outputId": "f0343341-271e-462a-97a8-b40b9b5e6058"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    186960\n",
              "1     93000\n",
              "2    110515\n",
              "3    131205\n",
              "4    104800\n",
              "Name: salary, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "#Look at the first few elements of the output\n",
        "df1.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Acy_NVnwHZfX"
      },
      "outputs": [],
      "source": [
        "#Select column salary and make the output to be a data frame\n",
        "df2 = df[['salary']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H-nZqYLCHZfX",
        "outputId": "de5170f2-c95a-45c6-e67f-746754b4eeaf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "#Check the type\n",
        "type(df2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "vehPh9HuHZfY",
        "outputId": "27d5f0ca-348c-4697-fb82-d27559b18b52"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rank discipline  phd  service   sex  salary\n",
              "0  Prof          B   56       49  Male  186960\n",
              "1  Prof          A   12        6  Male   93000\n",
              "2  Prof          A   23       20  Male  110515\n",
              "3  Prof          A   40       31  Male  131205\n",
              "4  Prof          B   20       18  Male  104800"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5b350397-159c-4818-aead-35fa9235cd38\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>discipline</th>\n",
              "      <th>phd</th>\n",
              "      <th>service</th>\n",
              "      <th>sex</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>56</td>\n",
              "      <td>49</td>\n",
              "      <td>Male</td>\n",
              "      <td>186960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>12</td>\n",
              "      <td>6</td>\n",
              "      <td>Male</td>\n",
              "      <td>93000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>23</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>110515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>40</td>\n",
              "      <td>31</td>\n",
              "      <td>Male</td>\n",
              "      <td>131205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>20</td>\n",
              "      <td>18</td>\n",
              "      <td>Male</td>\n",
              "      <td>104800</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b350397-159c-4818-aead-35fa9235cd38')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5b350397-159c-4818-aead-35fa9235cd38 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5b350397-159c-4818-aead-35fa9235cd38');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "#Select a subset of rows (based on their position):\n",
        "# Note 1: The location of the first row is 0\n",
        "# Note 2: The last value in the range is not included\n",
        "df_first10_rows=df[0:11]\n",
        "df_first10_rows.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "agg0luztHZfY"
      },
      "outputs": [],
      "source": [
        "#If we want to select both rows and columns we can use method .loc\n",
        "df_sub=df.loc[10:20,['rank', 'sex','salary']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jIKSGoP-HZfY",
        "outputId": "7ff82a1d-7aa3-46ac-8cd1-fcf617fbc07e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>discipline</th>\n",
              "      <th>phd</th>\n",
              "      <th>service</th>\n",
              "      <th>sex</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>56</td>\n",
              "      <td>49</td>\n",
              "      <td>Male</td>\n",
              "      <td>186960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>40</td>\n",
              "      <td>31</td>\n",
              "      <td>Male</td>\n",
              "      <td>131205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>122400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   rank discipline  phd  service   sex  salary\n",
              "0  Prof          B   56       49  Male  186960\n",
              "3  Prof          A   40       31  Male  131205\n",
              "5  Prof          A   20       20  Male  122400"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_sub.head(3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "WtTMtQaiHZfZ",
        "outputId": "da55064e-781d-440f-ad93-82da036183d0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        rank   sex\n",
              "0       Prof  Male\n",
              "1       Prof  Male\n",
              "2       Prof  Male\n",
              "3       Prof  Male\n",
              "4       Prof  Male\n",
              "5       Prof  Male\n",
              "6  AssocProf  Male\n",
              "7       Prof  Male\n",
              "8       Prof  Male\n",
              "9       Prof  Male"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-38dfd8a6-ca98-4753-b7bb-03b17c21b7a6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Prof</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Prof</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Prof</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Prof</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Prof</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Prof</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>AssocProf</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Prof</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Prof</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Prof</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38dfd8a6-ca98-4753-b7bb-03b17c21b7a6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-38dfd8a6-ca98-4753-b7bb-03b17c21b7a6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-38dfd8a6-ca98-4753-b7bb-03b17c21b7a6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "#  Unlike method .loc, method iloc selects rows (and columns) by poistion:\n",
        "#df_sub.iloc[10:20, [0,3,4,5]]\n",
        "df.iloc[0:10,[0,4]]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "79fBQyABHZfZ"
      },
      "source": [
        "\n",
        "---\n",
        "<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n",
        "<h1 align=center> Part 4: Sorting the Data </h1>\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "nyjkUwsjHZfZ",
        "outputId": "213f5e2f-5f89-4f36-c5d7-cc8f2c3010e1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        rank discipline  phd  service     sex  salary\n",
              "55  AsstProf          A    2        0  Female   72500\n",
              "23  AsstProf          A    2        0    Male   85000\n",
              "43  AsstProf          B    5        0  Female   77000\n",
              "17  AsstProf          B    4        0    Male   92000\n",
              "12  AsstProf          B    1        0    Male   88000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-452911a0-4b92-4bf5-a06d-5f8a9a56aff5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>discipline</th>\n",
              "      <th>phd</th>\n",
              "      <th>service</th>\n",
              "      <th>sex</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>AsstProf</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>Female</td>\n",
              "      <td>72500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>AsstProf</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>Male</td>\n",
              "      <td>85000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>AsstProf</td>\n",
              "      <td>B</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>Female</td>\n",
              "      <td>77000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>AsstProf</td>\n",
              "      <td>B</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>Male</td>\n",
              "      <td>92000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>AsstProf</td>\n",
              "      <td>B</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Male</td>\n",
              "      <td>88000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-452911a0-4b92-4bf5-a06d-5f8a9a56aff5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-452911a0-4b92-4bf5-a06d-5f8a9a56aff5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-452911a0-4b92-4bf5-a06d-5f8a9a56aff5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "#Sort the data frame by yrs.service and create a new data frame\n",
        "df_sorted = df.sort_values(by = 'service')\n",
        "df_sorted.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "5O8l36PPHZfa",
        "outputId": "c4faf9c0-59c6-4786-8023-5901abbe864c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    rank discipline  phd  service     sex  salary\n",
              "9   Prof          A   51       51    Male   57800\n",
              "0   Prof          B   56       49    Male  186960\n",
              "36  Prof          B   45       45    Male  146856\n",
              "27  Prof          A   45       43    Male  155865\n",
              "40  Prof          A   39       36  Female  137000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6305e783-d420-4c8f-bff9-dea35d37aece\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>discipline</th>\n",
              "      <th>phd</th>\n",
              "      <th>service</th>\n",
              "      <th>sex</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>51</td>\n",
              "      <td>51</td>\n",
              "      <td>Male</td>\n",
              "      <td>57800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>56</td>\n",
              "      <td>49</td>\n",
              "      <td>Male</td>\n",
              "      <td>186960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>45</td>\n",
              "      <td>45</td>\n",
              "      <td>Male</td>\n",
              "      <td>146856</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>45</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>155865</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>39</td>\n",
              "      <td>36</td>\n",
              "      <td>Female</td>\n",
              "      <td>137000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6305e783-d420-4c8f-bff9-dea35d37aece')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6305e783-d420-4c8f-bff9-dea35d37aece button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6305e783-d420-4c8f-bff9-dea35d37aece');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "#Sort the data frame by yrs.service and overwrite the original dataset\n",
        "df.sort_values(by = 'service', ascending = False, inplace = True)\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "pUROdbOpHZfa",
        "outputId": "6fd3a44c-7e49-4dac-e007-28b4374d327f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rank discipline  phd  service   sex  salary\n",
              "0  Prof          B   56       49  Male  186960\n",
              "1  Prof          A   12        6  Male   93000\n",
              "2  Prof          A   23       20  Male  110515\n",
              "3  Prof          A   40       31  Male  131205\n",
              "4  Prof          B   20       18  Male  104800"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0b393d37-5d84-459a-9fb0-2f8ff646b9bd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>discipline</th>\n",
              "      <th>phd</th>\n",
              "      <th>service</th>\n",
              "      <th>sex</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>56</td>\n",
              "      <td>49</td>\n",
              "      <td>Male</td>\n",
              "      <td>186960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>12</td>\n",
              "      <td>6</td>\n",
              "      <td>Male</td>\n",
              "      <td>93000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>23</td>\n",
              "      <td>20</td>\n",
              "      <td>Male</td>\n",
              "      <td>110515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>40</td>\n",
              "      <td>31</td>\n",
              "      <td>Male</td>\n",
              "      <td>131205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>20</td>\n",
              "      <td>18</td>\n",
              "      <td>Male</td>\n",
              "      <td>104800</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b393d37-5d84-459a-9fb0-2f8ff646b9bd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0b393d37-5d84-459a-9fb0-2f8ff646b9bd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0b393d37-5d84-459a-9fb0-2f8ff646b9bd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "# Restore the original order (by sorting using index)\n",
        "df.sort_index(axis=0, ascending = True, inplace = True)\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pJ82rIwaHZfa"
      },
      "source": [
        "\n",
        "---\n",
        "<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n",
        "<h1 align=center> Part 4: Explore data using graphics</h1>\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I14DUZO6HZfb"
      },
      "outputs": [],
      "source": [
        "#Show graphs withint Python notebook\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        },
        "id": "ECGp1a4THZfb",
        "outputId": "0aecb829-fab0-4a61-e11c-8c4e63bd4a25"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([2.97782119e-06, 1.48891059e-05, 1.19112848e-05, 1.38964989e-05,\n",
              "        8.93346356e-06, 1.09186777e-05, 3.97042825e-06, 7.94085650e-06,\n",
              "        9.92607063e-07, 9.92607063e-07]),\n",
              " array([ 57800.,  70716.,  83632.,  96548., 109464., 122380., 135296.,\n",
              "        148212., 161128., 174044., 186960.]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#Use matplotlib to draw a histogram of a salary data\n",
        "plt.hist(df['salary'],bins=10, density= True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 345
        },
        "id": "0sx_0BY7HZfb",
        "outputId": "a78e6575-eed7-46dd-df65-0c777ccf7811"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#Use seaborn package to draw a histogram\n",
        "sns.distplot(df['salary']);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "dP4gAKZ8HZfc",
        "outputId": "5bee0d23-2e78-4948-8696-b9c321fdf455"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f5454be9f50>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Use regular matplotlib function to display a barplot\n",
        "df.groupby(['rank'])['salary'].count().plot(kind='bar')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": false,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "zeqHQNF0HZfc",
        "outputId": "209b76bd-4d16-4faa-a3af-dc2240a47150"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEGCAYAAABiq/5QAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAVNUlEQVR4nO3dcViV9f3/8dcJ9IgiK1vivEbbdGuimWQ0xpWbSgkNgQMmrNnqglzklX5dszR0XdTcnOnXuvSy+YfTTGdd2pqCik0ERTe98BqWl0ypppliS3AYoqgHOX2+f/ST3yjQo3ifA36ej/+44b7v9+Hj9fRwc+6DyxhjBACwxk3BHgAAEFiEHwAsQ/gBwDKEHwAsQ/gBwDKhwR7AH/v27ZPb7Q72GADQpXi9XsXExHxle5cIv9vtVnR0dLDHAIAupaqqqs3tXOoBAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMvccOH3XvQFe4QbHt9joGvrEm/ZcDXc3UJ0z/RVwR7jhrb3fx8L9ggAOuCGe8YPALg8wg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AlnE8/D6fT+np6XryySclSdXV1crMzNSYMWP09NNPq6mpyekRAAD/xfHwr1q1SgMHDmz5eMGCBcrOztbWrVsVERGht99+2+kRAAD/xdHwnzhxQmVlZRo/frwkyRij8vJyJSUlSZIyMjJUWlrq5AgAgC8JdfLgv//97zV9+nQ1NjZKkj777DNFREQoNPSL0/br1081NTVXPI7X61VVVZVf54yOjr72geE3f9cDQOfjWPi3b9+uPn366M4779SePXs6dCy3203QOxnWA+j82nuC5lj43333XW3btk07d+6U1+vV2bNnNWfOHDU0NKi5uVmhoaE6ceKEIiMjnRoBANAGx67xP/PMM9q5c6e2bdumV155RT/84Q/18ssvKy4uTlu2bJEkrV+/XgkJCU6NAABoQ8Bfxz99+nStWLFCY8aMUX19vTIzMwM9AgBYzdFf7l4SFxenuLg4SVJUVBQv4QSAIOLOXQCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMsQfgCwDOEHAMuEOnVgr9erRx55RE1NTfL5fEpKStLUqVNVXV2tadOmqb6+XkOGDNH8+fPVvXt3p8YAAHyJY8/4u3fvrpUrV2rDhg0qKCjQ3/72N+3bt08LFixQdna2tm7dqoiICL399ttOjQAAaINj4Xe5XOrVq5ckqbm5Wc3NzXK5XCovL1dSUpIkKSMjQ6WlpU6NAABog2OXeiTJ5/Np3LhxOnbsmCZMmKCoqChFREQoNPSL0/br1081NTVXPI7X61VVVZVf54yOju7QzPCPv+sBoPNxNPwhISEqLCxUQ0ODJk+erI8++uiajuN2uwl6J8N6AJ1fe0/QAvKqnoiICMXFxWnfvn1qaGhQc3OzJOnEiROKjIwMxAgAgP/HsfCfOnVKDQ0NkqQLFy5o9+7dGjhwoOLi4rRlyxZJ0vr165WQkODUCACANjh2qae2tlZ5eXny+XwyxujBBx/U6NGj9d3vfle/+tWvtHDhQkVHRyszM9OpEQAAbXAs/IMGDVJBQcFXtkdFRfESTgAIIu7cBQDLEH4AsAzhBwDLEH4AsAzhBwDLEH4AsAzhBwDL+BV+n8/n9BwAgADxK/yJiYmaN2+eDh065PQ8AACH+RX+wsJCfec739Hzzz+vrKwsrV27VmfPnnV6NgCAA/wKf3h4uLKysrRmzRo9++yzevXVVzVixAg999xzOnr0qNMzAgCuI7/eq8fn86msrEzr1q3TJ598oscff1ypqamqqKhQbm5uy7ttAgA6P7/Cn5iYqLi4OE2cOFHDhw9v2f7ggw+qoqLCseEAANffFcPv8/mUkZGhKVOmtPn5559//roPBQBwzhWv8YeEhKisrCwAowAAAsGvSz3Dhw/X7NmzlZycrLCwsJbtQ4YMcWwwAIAz/Ar/pT/Yu2jRopZtLpdLq1atcmYqAIBj/Ar/n/70J6fnAAAEiN9/erGsrEz/+te/5PV6W7a19wtfAEDn5dcNXPn5+dq8ebNWr14tSdqyZYv+/e9/OzoYAMAZfoX/vffe0/z58xUREaEpU6ZozZo1+vjjjx0eDQDgBL/C36NHD0lSWFiYampq1K1bN508edLRwQAAzvDrGv+oUaPU0NCgiRMnaty4cXK5XBo/frzTswEAHOBX+CdPnixJSkpK0ujRo+X1etW7d29HBwMAOOOy4S8uLr7szomJidd1GACA8y4b/u3bt192Z8IPAF3PZcM/d+7cQM0BAAgQbuACAMtwAxcAWIYbuADAMn6F3+12S/r/N3CFhoZyAxcAdFF+XeMfPXr0V27gyszMdHo2AIAD/Ar/gAEDdNNNNykpKUmHDh3SwYMH9cADDzg9GwDAAX5d6lmyZInCw8NVUVGh8vJyZWZm6sUXX3R4NACAE/wKf0hIiCRpx44dysrK0qhRo3Tx4kVHBwMAOMOv8EdGRra8pHPkyJFqamrS559/7vRsAAAH+BX+hQsXasSIEVq+fLkiIiJUX1+vGTNmXHafTz/9VI8++qiSk5M1duxYrVy5UpJUX1+vnJwcJSYmKicnR6dPn+74owAA+M2v8IeFhSkxMVHf/va3JUl9+/bViBEjLrtPSEiI8vLytHnzZq1du1ZvvvmmDh06pKVLlyo+Pl7FxcWKj4/X0qVLO/wgAAD+8yv816Jv374aMmSIJCk8PFwDBgxQTU2NSktLlZ6eLklKT09XSUmJUyMAANrg93v1dMTx48dVVVWlYcOGqa6uTn379pUk3Xbbbaqrq7vi/l6vV1VVVX6dKzo6ukOzwj/+rgeAzsfx8Dc2Nmrq1KmaNWuWwsPDW33O5XLJ5XJd8Rhut5ugdzKsB9D5tfcEzbFLPZJ08eJFTZ06VampqS3v3X/rrbeqtrZWklRbW6s+ffo4OQIA4EscC78xRr/+9a81YMAA5eTktGxPSEhQQUGBJKmgoED333+/UyMAANrgWPj37t2rwsJClZeXy+PxyOPxaMeOHcrNzdWuXbuUmJio3bt3Kzc316kRAASQt9l75S9Ch1yv77Fj1/hjY2P1wQcftPm5S6/pB3DjcIe6dd/i+4I9xg1t1//sui7HcfQaPwCg8yH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH8AGAZwg8AliH86FRMszfYI9zw+B4jNNgDAP/NFerWsdlDgz3GDe32/Mpgj4Ag4xk/AFiG8AOAZQg/AFiG8AOAZQg/AFiG8AOAZQg/AFiG8AOAZQg/AFjGsfDPnDlT8fHxSklJadlWX1+vnJwcJSYmKicnR6dPn3bq9ACAdjgW/nHjxmnZsmWtti1dulTx8fEqLi5WfHy8li5d6tTpAQDtcCz89957r772ta+12lZaWqr09HRJUnp6ukpKSpw6PQCgHQF9k7a6ujr17dtXknTbbbeprq7Or/28Xq+qqqr8+tro6Ohrng/+83c9rhbrFxhOrB9rFxjXY+2C9u6cLpdLLpfLr691u938o+pkWI+ujfXruq5m7dr7TyKgr+q59dZbVVtbK0mqra1Vnz59Anl6AIACHP6EhAQVFBRIkgoKCnT//fcH8vQAADkY/mnTpunhhx/WkSNH9OMf/1h//vOflZubq127dikxMVG7d+9Wbm6uU6cHALTDsWv8r7zySpvbV65c6dQpAQB+4M5dALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAywQl/Dt37lRSUpLGjBmjpUuXBmMEALBWwMPv8/k0e/ZsLVu2TEVFRdq0aZMOHToU6DEAwFoBD//+/fv1rW99S1FRUerevbvGjh2r0tLSQI8BANYKDfQJa2pq1K9fv5aPIyMjtX///svu4/V6VVVV5fc5Vj9+7zXPhyu7mrW4JplvOXt8yzm5fsseWObYsXH1a+f1etvcHvDwX4uYmJhgjwAAN4yAX+qJjIzUiRMnWj6uqalRZGRkoMcAAGsFPPxDhw7Vxx9/rOrqajU1NamoqEgJCQmBHgMArBXwSz2hoaHKz8/XL37xC/l8Pj300EP63ve+F+gxAMBaLmOMCfYQAIDA4c5dALAM4QcAyxB+h0VHR8vj8SglJUVTp07V+fPnr2r/adOmKTU1Va+//rozA1qipKRE3//+93X48GFHz3P8+HHddddd8ng8Sk5OVn5+vj7//HO/929qalJ2drY8Ho82b97s4KRdW0fWc926daqpqWn5+NFHH1VSUpLS0tL08MMP66OPPrqq461atUo/+clP9Mwzz1z1LMFC+B3Wo0cPFRYWatOmTerWrZvWrFnT6vPNzc3t7nvy5ElVVlZq48aNys7OdnjSG9umTZt0zz33qKioyPFz3X777SosLNSGDRt0+PBhlZSUtPr85db84MGDkqTCwkIlJyc7OmdX1pH1XL9+vWpra1ttW7BggTZs2KCMjAzNnz//K/v4fL52j/fmm29qxYoVevnll696lmAh/AEUGxuro0ePas+ePZowYYImTZqksWPHyuv1aubMmUpNTVV6errKy8slSY8//rhqamrk8XhUUVER5Om7rsbGRu3du1dz5sxpCUVtba0eeeSRlp/GKioq5PP5lJeXp5SUlFY/ZVVVVSkrK0upqamaPHmyTp8+LUk6evSosrOzlZaWpoyMDB07dqzVeUNDQ3X33Xfr6NGjWrdunSZNmqTHHntM2dnZqq+v11NPPaXU1FRlZWXp/fffV11dnaZPn67Kykp5PJ6vHA9f6Mh6/vWvf9U///lPPfvss/J4PLpw4UKrY8fGxrZ83++++2699NJLSktL03vvvacVK1YoJSVFKSkpLf828vPzdfz4cT3xxBNd66dyA0fFxMQYY4y5ePGimTRpknnjjTdMeXm5GTZsmDl27Jgxxpjly5ebvLw8Y4wxhw4dMiNHjjQXLlww1dXVZuzYsUGb/UZRWFhoZs6caYwx5qc//amprKw0y5cvN0uWLDHGGNPc3GzOnDljKisrTXZ2dst+p0+fNsYYk5KSYvbs2WOMMWbhwoXmd7/7nTHGmPHjx5vi4mJjjDEXLlww586da7Vm586dM+PGjTNlZWXmL3/5i/nRj35kPvvsM2OMMbNnzzaLFy82xhize/duk5aWZowxpry83OTm5jr6/ejqOrqeP//5z83+/ftbtv/3x3/84x/NL3/5S2OMMXfccYcpKioyxhhTWVlpUlJSTGNjozl79qxJTk42Bw4cMMYYM3r0aFNXV+fwo76+eMbvsAsXLsjj8eihhx5S//79NX78eElf3MgWFRUlSdq7d6/S0tIkSQMHDlT//v115MiRoM18oykqKtLYsWMlScnJySoqKtLQoUO1bt06LV68WB9++KHCw8MVFRWl6upq/fa3v9XOnTsVHh6uM2fO6MyZM/rBD34gScrIyFBFRYXOnj2rmpoajRkzRpLkdrsVFhYmSTp27Jg8Ho9+9rOfadSoURo5cqQk6b777tPNN98s6Ys193g8kqT4+HjV19fr7NmzAf2+dFUdWc/2XPoJ4N1339Vzzz0nSQoJCVFSUpKkL9brgQceUM+ePdWrVy+NGTOmS/8U3iXeq6cru3SN/8t69uwZhGnsU19fr/Lycn344YdyuVzy+XxyuVyaMWOGVq9erR07digvL085OTlKT09XYWGh/v73v2vNmjV65513NGvWrKs+56Vr/F926T8GXLuOrufcuXPbPO6CBQs0dOjQVtvcbrdCQkIC8bACjmf8nUBsbKw2btwoSTpy5Ig+/fRTDRgwIMhT3Ri2bNkij8ej7du3a9u2bdqxY4e++c1v6h//+Ie+/vWvKysrS5mZmTpw4IBOnTolY4ySkpL09NNP6+DBg+rdu7ciIiJant0VFhbq3nvvVXh4uPr169fyi9umpqaresVWbGysNmzYIEnas2ePbrnllss+I8UXOrqektSrVy81NjZe1XljY2NVUlKi8+fP69y5cyopKVFsbKwTDzEgeMbfCUyYMEEvvviiUlNTFRISorlz56p79+7BHuuGsGnTJj3xxBOttiUmJiovL089e/ZUaGioevbsqXnz5qm2tlYzZ85sefnltGnTJEnz5s3TCy+8oPPnzysqKqrlWeP8+fOVn5+vRYsWqVu3blq0aJFcLpdfc02ZMkWzZs1SamqqwsLC9NJLL13HR33juh7rmZGRoRdeeEE9evTQ2rVr/TrvkCFDNG7cOGVmZkqSxo8fr8GDB1/HRxZYvGUDAFiGSz0AYBnCDwCWIfwAYBnCDwCWIfwAYBnCDzhg8eLFWr58ebDHANpE+IErMMZc1VsrA50dN3ABbTh+/LgmTpyoYcOG6cCBA7rrrrv0wQcfyOv1KikpSVOnTpUkJSQkKD09Xdu3b1dzc7MWLlyogQMHtjrWW2+9peLiYr366qvq0aNHMB4O0ArhB9px9OhRzZs3TzExMaqvr9fNN98sn8+n7Oxsvf/++xo0aJAk6ZZbbtH69ev1xhtv6LXXXtOcOXNajrF69Wrt2rVLS5Ys4W5sdBqEH2hH//79FRMTI0l655139NZbb6m5uVknT57U4cOHW8KfmJgoSbrzzju1devWlv0LCgr0jW98Q3/4wx/UrVu3wD8AoB1c4wfacekdVKurq/Xaa6/p9ddf18aNGzVq1Ch5vd6Wr7sU9ZtuuqnVX2q644479Mknn+jEiROBHRy4AsIPXEFjY6PCwsLUu3dv/ec//9HOnTv92m/w4MH6zW9+o6eeeqrV33gFgo3wA1cwaNAgDR48uOUPag8fPtzvfWNjYzVjxgw9+eSTOnXqlINTAv7j3TkBwDI84wcAyxB+ALAM4QcAyxB+ALAM4QcAyxB+ALAM4QcAy/wf21Ke/ePRE5sAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Use seaborn package to display a barplot\n",
        "sns.set_style(\"whitegrid\")\n",
        "\n",
        "ax = sns.barplot(x='rank',y ='salary', data=df, estimator=len)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "7ACN_gfDHZfc",
        "outputId": "8d9fd63f-7af4-4b11-c23c-b33a93292b17"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Split into 2 groups:\n",
        "ax = sns.barplot(x='rank',y ='salary', hue='sex', data=df, estimator=len)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "KqFX2gYmHZfd",
        "outputId": "62ba0621-22b2-4377-989e-51ba77267353"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f5454ade450>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Violinplot\n",
        "sns.violinplot(x = \"salary\", data=df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "HJtggrPgHZfd",
        "outputId": "718176b9-71bd-49b4-cb06-c3ceaf7ee480"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.JointGrid at 0x7f5454a45510>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Scatterplot in seaborn\n",
        "sns.jointplot(x='service', y='salary', data=df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "4bypQsv6HZfd",
        "outputId": "4456417c-f3c2-4edd-8cf4-cd5f00b9c991"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f545210f950>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#If we are interested in linear regression plot for 2 numeric variables we can use regplot\n",
        "sns.regplot(x='service', y='salary', data=df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "31g5TZXvHZfd",
        "outputId": "a5e7d535-cd96-43bf-effb-4d875b796523"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f545202c450>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# box plot\n",
        "sns.boxplot(x='rank',y='salary', data=df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "dzDYYN2BHZfd",
        "outputId": "83a78f9f-bba7-45eb-f3fa-808f454d3b38"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f5451fc8190>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# side-by-side box plot\n",
        "sns.boxplot(x='rank',y='salary', data=df, hue='sex')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "bWQtRYUaHZfe",
        "outputId": "4ba7aada-1b5f-4898-d7f8-33bcc8db95b2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f5451ebe310>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# swarm plot\n",
        "sns.swarmplot(x='rank',y='salary', data=df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 567
        },
        "id": "bBZwUMkYHZfe",
        "outputId": "d91356de-8a54-4672-e4fa-203d53479288"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x7f5451e72890>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 540x540 with 12 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Pairplot \n",
        "sns.pairplot(df)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.loc[0:50,['phd','service','salary']].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AWcxybtuIrtp",
        "outputId": "3ef9341e-7d00-41ee-bfdf-77939e91642b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "phd            21.294118\n",
              "service        17.352941\n",
              "salary     113460.568627\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"salary\"].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QhV40Zv7Iwle",
        "outputId": "b1fa0d84-b543-447a-bdda-95e8b728288f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count        78.000000\n",
              "mean     108023.782051\n",
              "std       28293.661022\n",
              "min       57800.000000\n",
              "25%       88612.500000\n",
              "50%      104671.000000\n",
              "75%      126774.750000\n",
              "max      186960.000000\n",
              "Name: salary, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.salary.value_counts(dropna=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NLqX90x2Izjy",
        "outputId": "a6e9051e-055d-4b0d-e50c-26947814fca0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "92000     3\n",
              "77500     2\n",
              "72500     2\n",
              "91000     2\n",
              "62884     1\n",
              "         ..\n",
              "99418     1\n",
              "91100     1\n",
              "85000     1\n",
              "73000     1\n",
              "109646    1\n",
              "Name: salary, Length: 73, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"salary\"].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bf6m8SXAI349",
        "outputId": "0ead41ba-6f5c-4d6b-d3a8-f947bd158fe9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "108023.78205128205"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.groupby(['discipline']).salary.mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i2KLBk8GI5gr",
        "outputId": "5246e9ae-772f-4c41-c26a-aebe2f401b0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "discipline\n",
              "A     98331.111111\n",
              "B    116331.785714\n",
              "Name: salary, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[ df['salary'] > 100000].sex.value_counts(dropna=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ELSQpWZZI78q",
        "outputId": "39a8a277-2954-4978-9fc1-875c1cabf39b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Male      25\n",
              "Female    21\n",
              "Name: sex, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.sort_values(by = 'salary', ascending = False).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "2d3ZxlwFI-IU",
        "outputId": "f61bb940-702a-4906-9a5d-c62dec938e11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    rank discipline  phd  service     sex  salary\n",
              "0   Prof          B   56       49    Male  186960\n",
              "13  Prof          B   35       33    Male  162200\n",
              "72  Prof          B   24       15  Female  161101\n",
              "27  Prof          A   45       43    Male  155865\n",
              "31  Prof          B   22       21    Male  155750"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-80ffbc5c-3ffa-4d46-a083-efc48370f45f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>discipline</th>\n",
              "      <th>phd</th>\n",
              "      <th>service</th>\n",
              "      <th>sex</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>56</td>\n",
              "      <td>49</td>\n",
              "      <td>Male</td>\n",
              "      <td>186960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>35</td>\n",
              "      <td>33</td>\n",
              "      <td>Male</td>\n",
              "      <td>162200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>24</td>\n",
              "      <td>15</td>\n",
              "      <td>Female</td>\n",
              "      <td>161101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Prof</td>\n",
              "      <td>A</td>\n",
              "      <td>45</td>\n",
              "      <td>43</td>\n",
              "      <td>Male</td>\n",
              "      <td>155865</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>Prof</td>\n",
              "      <td>B</td>\n",
              "      <td>22</td>\n",
              "      <td>21</td>\n",
              "      <td>Male</td>\n",
              "      <td>155750</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-80ffbc5c-3ffa-4d46-a083-efc48370f45f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-80ffbc5c-3ffa-4d46-a083-efc48370f45f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-80ffbc5c-3ffa-4d46-a083-efc48370f45f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ske8DD6FHZfg",
        "outputId": "68a9f26a-82c0-43cb-fc41-e7c3027da554"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         rank discipline  phd  service     sex  salary\n",
              "74  AssocProf          B   19        6  Female  104542\n",
              "30  AssocProf          B    9        7    Male  107008\n",
              "62  AssocProf          B   14        7  Female  109650\n",
              "34  AssocProf          B   12        8    Male  119800\n",
              "41  AssocProf          A   13        8  Female   74830"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-51e48775-353e-4891-9aa9-5db97fafc8e9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rank</th>\n",
              "      <th>discipline</th>\n",
              "      <th>phd</th>\n",
              "      <th>service</th>\n",
              "      <th>sex</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>AssocProf</td>\n",
              "      <td>B</td>\n",
              "      <td>19</td>\n",
              "      <td>6</td>\n",
              "      <td>Female</td>\n",
              "      <td>104542</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>AssocProf</td>\n",
              "      <td>B</td>\n",
              "      <td>9</td>\n",
              "      <td>7</td>\n",
              "      <td>Male</td>\n",
              "      <td>107008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>AssocProf</td>\n",
              "      <td>B</td>\n",
              "      <td>14</td>\n",
              "      <td>7</td>\n",
              "      <td>Female</td>\n",
              "      <td>109650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>AssocProf</td>\n",
              "      <td>B</td>\n",
              "      <td>12</td>\n",
              "      <td>8</td>\n",
              "      <td>Male</td>\n",
              "      <td>119800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>AssocProf</td>\n",
              "      <td>A</td>\n",
              "      <td>13</td>\n",
              "      <td>8</td>\n",
              "      <td>Female</td>\n",
              "      <td>74830</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-51e48775-353e-4891-9aa9-5db97fafc8e9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-51e48775-353e-4891-9aa9-5db97fafc8e9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-51e48775-353e-4891-9aa9-5db97fafc8e9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ],
      "source": [
        "df.sort_values(by = ['rank','service']).head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install nbconvert\n",
        "!jupyter nbconvert --to html /content/example.ipynb"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J7EIGWfYJDip",
        "outputId": "732c2771-1445-478a-e879-87b30d3508df"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: nbconvert in /usr/local/lib/python3.8/dist-packages (5.6.1)\n",
            "Requirement already satisfied: jinja2>=2.4 in /usr/local/lib/python3.8/dist-packages (from nbconvert) (2.11.3)\n",
            "Requirement already satisfied: nbformat>=4.4 in /usr/local/lib/python3.8/dist-packages (from nbconvert) (5.7.0)\n",
            "Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.8/dist-packages (from nbconvert) (0.4)\n",
            "Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.8/dist-packages (from nbconvert) (0.8.4)\n",
            "Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.8/dist-packages (from nbconvert) (5.7.1)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.8/dist-packages (from nbconvert) (0.7.1)\n",
            "Requirement already satisfied: testpath in /usr/local/lib/python3.8/dist-packages (from nbconvert) (0.6.0)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.8/dist-packages (from nbconvert) (2.6.1)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.8/dist-packages (from nbconvert) (5.0.1)\n",
            "Requirement already satisfied: jupyter-core in /usr/local/lib/python3.8/dist-packages (from nbconvert) (5.1.0)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.8/dist-packages (from nbconvert) (1.5.0)\n",
            "Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.8/dist-packages (from jinja2>=2.4->nbconvert) (2.0.1)\n",
            "Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.8/dist-packages (from nbformat>=4.4->nbconvert) (2.16.2)\n",
            "Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.8/dist-packages (from nbformat>=4.4->nbconvert) (4.3.3)\n",
            "Requirement already satisfied: importlib-resources>=1.4.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema>=2.6->nbformat>=4.4->nbconvert) (5.10.1)\n",
            "Requirement already satisfied: attrs>=17.4.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema>=2.6->nbformat>=4.4->nbconvert) (22.1.0)\n",
            "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema>=2.6->nbformat>=4.4->nbconvert) (0.19.2)\n",
            "Requirement already satisfied: zipp>=3.1.0 in /usr/local/lib/python3.8/dist-packages (from importlib-resources>=1.4.0->jsonschema>=2.6->nbformat>=4.4->nbconvert) (3.11.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.8/dist-packages (from bleach->nbconvert) (0.5.1)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.8/dist-packages (from bleach->nbconvert) (1.15.0)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.8/dist-packages (from jupyter-core->nbconvert) (2.6.0)\n",
            "[NbConvertApp] WARNING | pattern '/content/example.ipynb' matched no files\n",
            "This application is used to convert notebook files (*.ipynb)\n",
            "        to various other formats.\n",
            "\n",
            "        WARNING: THE COMMANDLINE INTERFACE MAY CHANGE IN FUTURE RELEASES.\n",
            "\n",
            "Options\n",
            "=======\n",
            "The options below are convenience aliases to configurable class-options,\n",
            "as listed in the \"Equivalent to\" description-line of the aliases.\n",
            "To see all configurable class-options for some <cmd>, use:\n",
            "    <cmd> --help-all\n",
            "\n",
            "--debug\n",
            "    set log level to logging.DEBUG (maximize logging output)\n",
            "    Equivalent to: [--Application.log_level=10]\n",
            "--show-config\n",
            "    Show the application's configuration (human-readable format)\n",
            "    Equivalent to: [--Application.show_config=True]\n",
            "--show-config-json\n",
            "    Show the application's configuration (json format)\n",
            "    Equivalent to: [--Application.show_config_json=True]\n",
            "--generate-config\n",
            "    generate default config file\n",
            "    Equivalent to: [--JupyterApp.generate_config=True]\n",
            "-y\n",
            "    Answer yes to any questions instead of prompting.\n",
            "    Equivalent to: [--JupyterApp.answer_yes=True]\n",
            "--execute\n",
            "    Execute the notebook prior to export.\n",
            "    Equivalent to: [--ExecutePreprocessor.enabled=True]\n",
            "--allow-errors\n",
            "    Continue notebook execution even if one of the cells throws an error and include the error message in the cell output (the default behaviour is to abort conversion). This flag is only relevant if '--execute' was specified, too.\n",
            "    Equivalent to: [--ExecutePreprocessor.allow_errors=True]\n",
            "--stdin\n",
            "    read a single notebook file from stdin. Write the resulting notebook with default basename 'notebook.*'\n",
            "    Equivalent to: [--NbConvertApp.from_stdin=True]\n",
            "--stdout\n",
            "    Write notebook output to stdout instead of files.\n",
            "    Equivalent to: [--NbConvertApp.writer_class=StdoutWriter]\n",
            "--inplace\n",
            "    Run nbconvert in place, overwriting the existing notebook (only \n",
            "            relevant when converting to notebook format)\n",
            "    Equivalent to: [--NbConvertApp.use_output_suffix=False --NbConvertApp.export_format=notebook --FilesWriter.build_directory=]\n",
            "--clear-output\n",
            "    Clear output of current file and save in place, \n",
            "            overwriting the existing notebook.\n",
            "    Equivalent to: [--NbConvertApp.use_output_suffix=False --NbConvertApp.export_format=notebook --FilesWriter.build_directory= --ClearOutputPreprocessor.enabled=True]\n",
            "--no-prompt\n",
            "    Exclude input and output prompts from converted document.\n",
            "    Equivalent to: [--TemplateExporter.exclude_input_prompt=True --TemplateExporter.exclude_output_prompt=True]\n",
            "--no-input\n",
            "    Exclude input cells and output prompts from converted document. \n",
            "            This mode is ideal for generating code-free reports.\n",
            "    Equivalent to: [--TemplateExporter.exclude_output_prompt=True --TemplateExporter.exclude_input=True]\n",
            "--log-level=<Enum>\n",
            "    Set the log level by value or name.\n",
            "    Choices: any of [0, 10, 20, 30, 40, 50, 'DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL']\n",
            "    Default: 30\n",
            "    Equivalent to: [--Application.log_level]\n",
            "--config=<Unicode>\n",
            "    Full path of a config file.\n",
            "    Default: ''\n",
            "    Equivalent to: [--JupyterApp.config_file]\n",
            "--to=<Unicode>\n",
            "    The export format to be used, either one of the built-in formats\n",
            "            ['asciidoc', 'custom', 'html', 'latex', 'markdown', 'notebook', 'pdf', 'python', 'rst', 'script', 'slides']\n",
            "            or a dotted object name that represents the import path for an\n",
            "            `Exporter` class\n",
            "    Default: 'html'\n",
            "    Equivalent to: [--NbConvertApp.export_format]\n",
            "--template=<Unicode>\n",
            "    Name of the template file to use\n",
            "    Default: ''\n",
            "    Equivalent to: [--TemplateExporter.template_file]\n",
            "--writer=<DottedObjectName>\n",
            "    Writer class used to write the \n",
            "                                        results of the conversion\n",
            "    Default: 'FilesWriter'\n",
            "    Equivalent to: [--NbConvertApp.writer_class]\n",
            "--post=<DottedOrNone>\n",
            "    PostProcessor class used to write the\n",
            "                                        results of the conversion\n",
            "    Default: ''\n",
            "    Equivalent to: [--NbConvertApp.postprocessor_class]\n",
            "--output=<Unicode>\n",
            "    overwrite base name use for output files.\n",
            "                can only be used when converting one notebook at a time.\n",
            "    Default: ''\n",
            "    Equivalent to: [--NbConvertApp.output_base]\n",
            "--output-dir=<Unicode>\n",
            "    Directory to write output(s) to. Defaults\n",
            "                                  to output to the directory of each notebook. To recover\n",
            "                                  previous default behaviour (outputting to the current \n",
            "                                  working directory) use . as the flag value.\n",
            "    Default: ''\n",
            "    Equivalent to: [--FilesWriter.build_directory]\n",
            "--reveal-prefix=<Unicode>\n",
            "    The URL prefix for reveal.js (version 3.x).\n",
            "            This defaults to the reveal CDN, but can be any url pointing to a copy \n",
            "            of reveal.js. \n",
            "            For speaker notes to work, this must be a relative path to a local \n",
            "            copy of reveal.js: e.g., \"reveal.js\".\n",
            "            If a relative path is given, it must be a subdirectory of the\n",
            "            current directory (from which the server is run).\n",
            "            See the usage documentation\n",
            "            (https://nbconvert.readthedocs.io/en/latest/usage.html#reveal-js-html-slideshow)\n",
            "            for more details.\n",
            "    Default: ''\n",
            "    Equivalent to: [--SlidesExporter.reveal_url_prefix]\n",
            "--nbformat=<Enum>\n",
            "    The nbformat version to write.\n",
            "            Use this to downgrade notebooks.\n",
            "    Choices: any of [1, 2, 3, 4]\n",
            "    Default: 4\n",
            "    Equivalent to: [--NotebookExporter.nbformat_version]\n",
            "\n",
            "Examples\n",
            "--------\n",
            "\n",
            "    The simplest way to use nbconvert is\n",
            "\n",
            "            > jupyter nbconvert mynotebook.ipynb\n",
            "\n",
            "            which will convert mynotebook.ipynb to the default format (probably HTML).\n",
            "\n",
            "            You can specify the export format with `--to`.\n",
            "            Options include ['asciidoc', 'custom', 'html', 'latex', 'markdown', 'notebook', 'pdf', 'python', 'rst', 'script', 'slides'].\n",
            "\n",
            "            > jupyter nbconvert --to latex mynotebook.ipynb\n",
            "\n",
            "            Both HTML and LaTeX support multiple output templates. LaTeX includes\n",
            "            'base', 'article' and 'report'.  HTML includes 'basic' and 'full'. You\n",
            "            can specify the flavor of the format used.\n",
            "\n",
            "            > jupyter nbconvert --to html --template basic mynotebook.ipynb\n",
            "\n",
            "            You can also pipe the output to stdout, rather than a file\n",
            "\n",
            "            > jupyter nbconvert mynotebook.ipynb --stdout\n",
            "\n",
            "            PDF is generated via latex\n",
            "\n",
            "            > jupyter nbconvert mynotebook.ipynb --to pdf\n",
            "\n",
            "            You can get (and serve) a Reveal.js-powered slideshow\n",
            "\n",
            "            > jupyter nbconvert myslides.ipynb --to slides --post serve\n",
            "\n",
            "            Multiple notebooks can be given at the command line in a couple of \n",
            "            different ways:\n",
            "\n",
            "            > jupyter nbconvert notebook*.ipynb\n",
            "            > jupyter nbconvert notebook1.ipynb notebook2.ipynb\n",
            "\n",
            "            or you can specify the notebooks list in a config file, containing::\n",
            "\n",
            "                c.NbConvertApp.notebooks = [\"my_notebook.ipynb\"]\n",
            "\n",
            "            > jupyter nbconvert --config mycfg.py\n",
            "\n",
            "To see all available configurables, use `--help-all`.\n",
            "\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
